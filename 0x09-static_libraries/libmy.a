!<arch>
0-isupper.c/    0           0     0     644     197       `
#include "main.h"

/**
 * _isupper - checks uppercase
 * @c: parameter
 * Return: 0 if successful
 */

int _isupper(int c)
{
	if (c >= 65 && c < 91)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     461       `
#include "main.h"
/**
 *_memset - fills memory with a constant byte.
 *fills the first n bytes of the memory area pointed
 *to by s with the constant b.
 *@s: pointer to memory area.
 *@b: constant to fill memory with.
 *@n: bytes of the memory area to be filled.
 *
 *Return: pointer to memory area s.
*/
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int counter;

	for (counter = 0; counter < n; counter++)
	{
		s[counter] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     431       `
#include "main.h"
/**
 * _strcat - Function that concatenates two strings.
 * @dest: Pointer to destination string
 * @src: Pointer to source string.
 *
 * Return: pointer to destination string.
 */
char *_strcat(char *dest, char *src)
{
	int length, j;

	length = 0;
	while (dest[length] != '\0')
	{
		length++;
	}
	for (j = 0; src[j] != '\0'; j++, length++)
	{
		dest[length] = src[j];
	}
	dest[length] = '\0';
	return (dest);
}

1-isdigit.c/    0           0     0     644     189       `
#include "main.h"

/**
 * _isdigit - checks for digits
 * @c: parameter
 * Return: 0 or 1
 */

int _isdigit(int c)
{
	if (c >= 48 && c < 58)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     355       `
#include "main.h"
/**
* char *_memcpy - copies n bytes from memory area src to memory area dest
* @dest: destination
* @src: source
* @n: number of bytes
* Return: pointer to dest
*/

char *_memcpy(char *dest, char *src, unsigned int n)
{

	int size = n;

	if (size > 0)
	{
		int i;

		for (i = 0; i < size; i++)
		dest[i] = src[i];
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     516       `
#include "main.h"
/**
 * _strncat - function that concatenates two strings.
 * at most n bytes from src
 * @dest: Pointer to destination string
 * @src: Pointer to source string
 * @n: number of bytes to be concatenate
 *
 * Return: Pointer to destination string
 */
char *_strncat(char *dest, char *src, int n)
{
	int length, j;

	length = 0;
	while (dest[length] != '\0')
	{
		length++;
	}
	for (j = 0; j < n && src[j] != '\0'; j++, length++)
	{
		dest[length] = src[j];
	}
	dest[length] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     360       `
#include "main.h"
#define NULL 0

/**
* _strchr - locate 1st occurrence of char in string and returns pointer there
* @s: string to search
* @c: target characer
* Return: pointer to that character in string
*/

char *_strchr(char *s, char c)
{
	int i = 0;

	while (s[i] != '\0' && s[i] != c)
		i++;

	if (s[i] == c)
		return (&s[i]);

	else
		return (NULL);
}
2-strlen.c/     0           0     0     644     256       `
#include <stdio.h>
#include "main.h"

/**
 * _strlen - Function for counting the length of string
 * @s: a pointer for counting the strting length
 * Return: int i
 */

int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
	{
		i++;
	}

	return (i);
}
2-strncpy.c/    0           0     0     644     391       `
#include "main.h"
/**
 * _strncpy - copies a string
 * @dest: Pointer to a character that will be changed
 * @src: Pointer to a character that will be changed
 * @n: value
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)

{
	int i;

	i = 0;

	while (i < n && src[i] != '\0')
	{
		dest[i] = src[i];
		i++;
	}

	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}

	return (dest);
}

3-islower.c/    0           0     0     644     330       `
#include "main.h"
/**
 * _islower - checks if a character is lowercase if YES it returns 1
 * otherwise returns 0 just like islower() function in ctype.h
 * @c: Is the int value to be compared with the ASCII value
 * Return: 0 if successful.
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     204       `
#include "main.h"
/**
 * _puts - print a string to stdout
 * @str: pointer parameter
 */

void _puts(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		_putchar(str[i]);
		i++;
	}

	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     483       `
#include "main.h"
/**
 * _strcmp - compares two strings
 * @s1: Pointer to first string
 * @s2: Pointer to second string
 *
 * Return: Value less than 0 if string is less than the other
 * Value greater than 0 if string is greater then the other
 * 0 if strings are equal
 */
int _strcmp(char *s1, char *s2)
{
	int counter, cmpVal;

	counter = 0;
	while (s1[counter] == s2[counter] && s1[counter] != '\0')
	{
		counter++;
	}

	cmpVal = s1[counter] - s2[counter];
	return (cmpVal);
}

4-isalpha.c/    0           0     0     644     273       `
#include "main.h"
/**
 * _isalpha - Return 1 if c is a letter. lowercase or uppercase
 * @c: unsigned int value to be compared with ASCII value
 * Return: 1 if its alphabet otherwise 0
 */
int _isalpha(int c)
{
	if (c >= 65 && c <= 122)
		return (1);
	else
		return (0);
}

5-strstr.c/     0           0     0     644     849       `
#include "main.h"
#define NULL 0

/**
* _strstr - locate and return pointer to first occurence of substring
* @haystack: string to search
* @needle: target substring to search for
* Return: pointer to index of string at first occurence of whole substring
*/
char *_strstr(char *haystack, char *needle)
{
	int i = 0, j, x;

	if (needle[0] == '\0')
		return (haystack);

	while (haystack[i] != '\0') /* iterate through haystack */
	{
		/* if a byte matches first char of needle */
		/* interate through needle until match ends */

		if (haystack[i] == needle[0])
		{
			x = i, j = 0;

			while (needle[j] != '\0')
			{
				if (haystack[x] == needle[j])
				x++, j++;

				else
				break;
			} /* if matched throughout, return haystack */

			if (needle[j] == '\0')
			{
				return (haystack + i);
			}
		}

		i++;
	}

	return (NULL); /* No match */
}

6-abs.c/        0           0     0     644     283       `
#include "main.h"
#include <stdio.h>
/**
 * _abs - computes the absolute value of an integer
 * @n: THe int to be operated upon
 * Return: returns an unsigneed int value to calling function
 */
int _abs(int n)
{
	if (n > 0)
	{
		return (n);
	}
	else
	{
		n *= -1;
		return (n);
	}
}

9-strncpy.c/    0           0     0     644     329       `
#include <stdio.h>
#include "main.h"

/**
 * _strcpy - function copies string pointed to src and dest
 * @dest: Pointer parameter
 * @src: poiter parameter
 * Return: char
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; *(src + i) != '\0'; i++)
	{
		dest[i] = *(src + i);
	}
	dest[i] = '\0';

	return (dest);
}

main.c/         0           0     0     644     0         `
_putchar.c/     0           0     0     644     291       `
#include <unistd.h>



/**
 *
 *  * _putchar - writes the character c to stdout
 *
 *   * @c: The character to print
 *
 *    *
 *
 *     * Return: On success 1.
 *
 *      * On error, -1 is returned, and errno is set appropriately*/

int _putchar(char c)

{

		return (write(1, &c, 1));

}

